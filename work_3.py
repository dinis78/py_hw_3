# Дан список повторяющихся элементов. 
# Вернуть список с дублирующимися элементами. В результирующем списке не должно быть дубликатов.

# def get_dubl(lst):
#     return list(set([i for i in lst if lst.count(i) > 1]))

# my_list = [1, 2, 3, 4, 3, 2, 5, 6, 6, 7, 8, 7, 9]

# dubl = get_dubl(my_list)
# print(dubl)

###################################################################################

# В большой текстовой строке подсчитать количество встречаемых слов и вернуть 10 самых частых. 
# Не учитывать знаки препинания и регистр символов. 
# За основу возьмите любую статью из википедии или из документации к языку.

# import re
# from collections import Counter

# def common_words(text, n):
#     cleaned_text = re.sub(r'[^\w\s]', '', text.lower())
#     words = cleaned_text.split()
#     word_counts = Counter(words)
#     return word_counts.most_common(n)
# text = '''
# Python (МФА: [ˈpʌɪθ(ə)n]; в русском языке встречаются названия пито́н[24] 
# или па́йтон[25]) — высокоуровневый язык программирования общего назначения 
# с динамической строгой типизацией и автоматическим управлением памятью[26][27], 
# ориентированный на повышение производительности разработчика, читаемости кода и 
# его качества, а также на обеспечение переносимости написанных на нём программ[28]. 
# Язык является полностью объектно-ориентированным в том плане, что всё является объектами[26]. 
# Необычной особенностью языка является выделение блоков кода пробельными отступами[29]. 
# Синтаксис ядра языка минималистичен, за счёт чего на практике редко возникает необходимость 
# обращаться к документации[28]. Сам же язык известен как интерпретируемый и используется в том 
# числе для написания скриптов[26]. Недостатками языка являются зачастую более низкая скорость работы 
# и более высокое потребление памяти написанных на нём программ по сравнению с аналогичным кодом, 
# написанным на компилируемых языках, таких как C или C++[26][28].
# '''

# most_common_words = common_words(text, 10)
# print(most_common_words)


#############################################################################


# Создайте словарь со списком вещей для похода в качестве ключа и их массой в качестве значения. 
# Определите какие вещи влезут в рюкзак передав его максимальную грузоподъёмность. 
# Достаточно вернуть один допустимый вариант. *Верните все возможные варианты комплектации рюкзака.

def find_possible_items(items, max_weight):
   
    def find(items, max_weight, curr_weight, curr_items):
        if not items or curr_weight == max_weight:
            return curr_items
        item = items[0]
        if curr_weight + item[1] <= max_weight:
            result = find(items[1:], max_weight, curr_weight + item[1], curr_items + [item[0]])
            if result:
                return result
        return find(items[1:], max_weight, curr_weight, curr_items)
    return find(items, max_weight, 0, [])
items = {
    'палатка': 3,
    'спальник': 2,
    'еда': 5,
    'фонарик': 1,
    'карта': 1,
    'котелок': 4
}
max_weight = 15  
possible_items = find_possible_items(list(items.items()), max_weight)
print(possible_items)







































